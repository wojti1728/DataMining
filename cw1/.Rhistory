library(xgboost)
library(ggplot2)
library(fastDummies)
library(FSelector)
diamonds <- dummy_cols(diamonds, select_columns = "cut")
diamonds <- diamonds %>% select(-cut)
diamonds <- dummy_cols(diamonds, select_columns = "color")
diamonds <- diamonds %>% select(-color)
diamonds <- dummy_cols(diamonds, select_columns = "clarity")
diamonds <- diamonds %>% select(-clarity)
diamonds <- dummy_cols(diamonds, select_columns = "cut")
diamonds <- diamonds %>% select(-cut)
diamonds <- dummy_cols(diamonds, select_columns = "color")
diamonds <- diamonds %>% select(-color)
diamonds <- dummy_cols(diamonds, select_columns = "clarity")
diamonds <- diamonds %>% select(-clarity)
library(dplyr)
diamonds <- dummy_cols(diamonds, select_columns = "cut")
diamonds <- diamonds %>% select(-cut)
diamonds <- dummy_cols(diamonds, select_columns = "color")
diamonds <- diamonds %>% select(-color)
diamonds <- dummy_cols(diamonds, select_columns = "clarity")
diamonds <- diamonds %>% select(-clarity)
diamonds
cols <- c("carat", "depth", "table", "x", "y", "z", "cut", "color", "clarity")
target <- "price"
# Compute the mutual information between the columns
mi_index <- mutinformation(diamonds[cols], diamonds$price)
# Load the necessary packages
library(xgboost)
library(ggplot2)
library(fastDummies)
library(FSelector)
library(dplyr)
# Compute the mutual information between the columns
mi_index <- mutinformation(diamonds[cols], diamonds$price)
install.packages("FSelector")
install.packages("FSelector")
library(fastDummies)
library(FSelector)
library(dplyr)
diamonds <- dummy_cols(diamonds, select_columns = "cut")
diamonds <- diamonds %>% select(-cut)
diamonds <- dummy_cols(diamonds, select_columns = "color")
diamonds <- diamonds %>% select(-color)
diamonds <- dummy_cols(diamonds, select_columns = "clarity")
diamonds <- diamonds %>% select
cols <- c("carat", "depth", "table", "x", "y", "z", "cut", "color", "clarity")
setwd("D:/AGH-studia/Semestr_7/Data_Mininig/cw1")
setwd("D:/AGH-studia/Semestr_7/Data_Mininig/cw1")
data <- read.csv("Real_estate.csv")
View(data)
str(data)
summary(data)
View(data)
View(data)
#Preprocessing
data <- data[, -which(names(data) == "No")]
View(data)
View(data)
hist(data$Y.house.price.of.unit.area)
boxplot(data$X4.number.of.convenience.stores, data$Y.house.price.of.unit.area)
boxplot(data$Y.house.price.of.unit.area,data$X4.number.of.convenience.stores)
boxplot(data$X4.number.of.convenience.stores, data$Y.house.price.of.unit.area)
boxplot(data$X4.number.of.convenience.stores, data$Y.house.price.of.unit.area)
boxplot(data$X4.number.of.convenience.stores, data$Y.house.price.of.unit.area)
hist(data$Y.house.price.of.unit.area)
hist(data$Y.house.price.of.unit.area)
boxplot(data$X4.number.of.convenience.stores, data$Y.house.price.of.unit.area)
View(data)
View(data)
cor(data, method='pearsona')
cor(data$X2.house.age,data$Y.house.price.of.unit.area, method='pearsona')
cor(data$X2.house.age,data$Y.house.price.of.unit.area, method='pearsona')
cor(data$X2.house.age, data$Y.house.price.of.unit.area, method='pearsona')
cor(data$X2.house.age, data$Y.house.price.of.unit.area, method='pearson')
corplot(data$X2.house.age, data$Y.house.price.of.unit.area, method='pearson')
plot(data$X2.house.age, data$Y.house.price.of.unit.area)
plot(data$X2.house.age, data$Y.house.price.of.unit.area)
cor_mat_s<-round(cos(data, method="spearman"),2)
cor_mat_s<-round(cor(data, method="spearman"),2)
cor_mat_p<-round(cor(data),2)
carplot(cor_mat_s)
library(carplot)
library(coorplot)
library(corplot)
library(corrplot)
install.packages(corrplot)
install.packages('corrplot')
library(corrplot)
carplot(cor_mat_s)
corplot(cor_mat_s)
corrplot(cor_mat_s)
