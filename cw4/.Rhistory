install.packages("purrr")
install.packages("magrittr")
install.packages("tidyr")
update.packages(ask = FALSE)
packageVersion("tidyverse")
install.packages("tidyverse")
library(liver)
install.packages("liver")
library(liver)
data("cereal")
View(cereal)
View(cereal)
library(corrplot)
cor_matrixp<-round(cor(cereal[4:16]),2)
View(conf)
boxplot(cereal$rating)
boxplot(cereal$rating~cereal$type)
boxplot(cereal$rating)
max <- A <- B1 <- B2 <- B3 <- 0
for (i in -2:0.2:2)
{
for (j in -2:0.2:2)
{
for (k in -2:0.2:2)
{
for (l in -2:0.2:2)
model2 <- nls(mpg ~ a0 + b1*disp^2+b2*log(wt)+b3*cyl4, data = mtcars, start = list(a0 = i, b1 = j, b2=k, b3=l))
a0 = summary(model2)$parameters[1][1]
b1 = summary(model2)$parameters[2][1]
b2 = summary(model2)$parameters[3][1]
b3 = summary(model2)$parameters[4][1]
model2_results<-data.frame(pred=a0+b1*mtcars$disp*mtcars$disp+b2*log(mtcars$wt)+mtcars$cyl4*b3,
real=mtcars$mpg)
model2_results<-model2_results %>%
mutate(res=real-pred)
model2_R2<-(cor(model2_results$real, model2_results$pred))^2
if (model2_R2 > max)
{
max = model2_R2
A = a0
B1 = b1
B2 = b2
B3 = b3
}
}
}
}
model2_results<-data.frame(pred=A+B1*mtcars$disp*mtcars$disp+B2*log(mtcars$wt)+mtcars$cyl4*B3,
real=mtcars$mpg)
model2_results<-model2_results %>%
mutate(res=real-pred)
model1<-lm(mpg~cyl+disp+wt+vs, data=mtcars)
summary(model1)
model1<-lm(mpg~cyl+disp+wt, data=mtcars)
summary(model1)
model1<-lm(mpg~cyl+wt, data=mtcars)
summary(model1)
#przyklad 2
library(corplot)
library(dplyr)
corplot(mtcars)
cor(mtcars)
mtcars = mtcars %>%
mutate(cyl4 = (cyl==4))
max <- A <- B1 <- B2 <- B3 <- 0
for (i in -2:0.2:2)
{
for (j in -2:0.2:2)
{
for (k in -2:0.2:2)
{
for (l in -2:0.2:2)
model2 <- nls(mpg ~ a0 + b1*disp^2+b2*log(wt)+b3*cyl4, data = mtcars, start = list(a0 = i, b1 = j, b2=k, b3=l))
a0 = summary(model2)$parameters[1][1]
b1 = summary(model2)$parameters[2][1]
b2 = summary(model2)$parameters[3][1]
b3 = summary(model2)$parameters[4][1]
model2_results<-data.frame(pred=a0+b1*mtcars$disp*mtcars$disp+b2*log(mtcars$wt)+mtcars$cyl4*b3,
real=mtcars$mpg)
model2_results<-model2_results %>%
mutate(res=real-pred)
model2_R2<-(cor(model2_results$real, model2_results$pred))^2
if (model2_R2 > max)
{
max = model2_R2
A = a0
B1 = b1
B2 = b2
B3 = b3
}
}
}
}
model2_results<-data.frame(pred=A+B1*mtcars$disp*mtcars$disp+B2*log(mtcars$wt)+mtcars$cyl4*B3,
real=mtcars$mpg)
model2_results<-model2_results %>%
mutate(res=real-pred)
model2_R2<-(cor(model2_results$real, model2_results$pred))^2
A
B1
B2
B3
model2_R2
series_g <- read.csv('Series_G.csv', sep='\t',header = FALSE)
max <- A <- B1 <- B2 <- B3 <- 0
for (i in -2:0.2:2)
{
for (j in -2:0.2:2)
{
for (k in -2:0.2:2)
{
for (l in -2:0.2:2)
model2 <- nls(mpg ~ a0 + b1*disp^2+b2*log(wt)+b3*cyl4, data = mtcars, start = list(a0 = i, b1 = j, b2=k, b3=l))
a0 = summary(model2)$parameters[1][1]
b1 = summary(model2)$parameters[2][1]
b2 = summary(model2)$parameters[3][1]
b3 = summary(model2)$parameters[4][1]
model2_results<-data.frame(pred=a0+b1*mtcars$disp*mtcars$disp+b2*log(mtcars$wt)+mtcars$cyl4*b3,
real=mtcars$mpg)
model2_results<-model2_results %>%
mutate(res=real-pred)
model2_R2<-(cor(model2_results$real, model2_results$pred))^2
if (model2_R2 > max)
{
max = model2_R2
A = a0
B1 = b1
B2 = b2
B3 = b3
}
}
}
}
model2_results<-data.frame(pred=A+B1*mtcars$disp*mtcars$disp+B2*log(mtcars$wt)+mtcars$cyl4*B3,
real=mtcars$mpg)
model2_results<-model2_results %>%
mutate(res=real-pred)
model2_R2<-(cor(model2_results$real, model2_results$pred))^2
A
B1
B2
B3
model2_R2
for (i in -2:0.2:2)
{
for (j in -2:0.2:2)
{
for (k in -2:0.2:2)
{
for (l in -2:0.2:2)
model2 <- nls(mpg ~ a0 + b1*disp^2+b2*log(wt)+b3*cyl4, data = mtcars, start = list(a0 = i, b1 = j, b2=k, b3=l))
a0 = summary(model2)$parameters[1][1]
b1 = summary(model2)$parameters[2][1]
b2 = summary(model2)$parameters[3][1]
b3 = summary(model2)$parameters[4][1]
model2_results<-data.frame(pred=a0+b1*mtcars$disp*mtcars$disp+b2*log(mtcars$wt)+mtcars$cyl4*b3,
real=mtcars$mpg)
model2_results<-model2_results %>%
mutate(res=real-pred)
model2_R2<-(cor(model2_results$real, model2_results$pred))^2
if (model2_R2 > max)
{
max = model2_R2
print("max")
A = a0
B1 = b1
B2 = b2
B3 = b3
}
}
}
}
model2_results<-data.frame(pred=A+B1*mtcars$disp*mtcars$disp+B2*log(mtcars$wt)+mtcars$cyl4*B3,
real=mtcars$mpg)
model2_results<-model2_results %>%
mutate(res=real-pred)
model2_R2<-(cor(model2_results$real, model2_results$pred))^2
max <- A <- B1 <- B2 <- B3 <- 0
for (i in -2:0.2:2)
{
for (j in -2:0.2:2)
{
for (k in -2:0.2:2)
{
for (l in -2:0.2:2)
model2 <- nls(mpg ~ a0 + b1*disp^2+b2*log(wt)+b3*cyl4, data = mtcars, start = list(a0 = i, b1 = j, b2=k, b3=l))
a0 = summary(model2)$parameters[1][1]
b1 = summary(model2)$parameters[2][1]
b2 = summary(model2)$parameters[3][1]
b3 = summary(model2)$parameters[4][1]
model2_results<-data.frame(pred=a0+b1*mtcars$disp*mtcars$disp+b2*log(mtcars$wt)+mtcars$cyl4*b3,
real=mtcars$mpg)
model2_results<-model2_results %>%
mutate(res=real-pred)
model2_R2<-(cor(model2_results$real, model2_results$pred))^2
if (model2_R2 > max)
{
max = model2_R2
print("max")
A = a0
B1 = b1
B2 = b2
B3 = b3
}
}
}
}
model2_results<-data.frame(pred=A+B1*mtcars$disp*mtcars$disp+B2*log(mtcars$wt)+mtcars$cyl4*B3,
real=mtcars$mpg)
model2_results<-model2_results %>%
mutate(res=real-pred)
model2_R2<-(cor(model2_results$real, model2_results$pred))^2
A
B1
B2
B3
model2_R2
corplot(mtcars)
#przyklad 2
library(corplot)
#przyklad 2
library(corrplot)
corrplot(mtcars)
corrplot(mtcars)
cor(mtcars)
corrplot(cor(mtcars))
knitr::opts_chunk$set(echo = TRUE)
library(corrplot)
library(dplyr)
corrplot(cor(mtcars))
mtcars = mtcars %>%
mutate(cyl4 = (cyl==4))
max <- A <- B1 <- B2 <- B3 <- 0
for (i in -15:0.5:15)
{
for (j in -15:0.5:15)
{
for (k in -15:0.5:15)
{
for (l in -15:0.5:15)
model2 <- nls(mpg ~ a0 + b1*disp^2+b2*log(wt)+b3*cyl4, data = mtcars, start = list(a0 = i, b1 = j, b2=k, b3=l))
a0 = summary(model2)$parameters[1][1]
b1 = summary(model2)$parameters[2][1]
b2 = summary(model2)$parameters[3][1]
b3 = summary(model2)$parameters[4][1]
model2_results<-data.frame(pred=a0+b1*mtcars$disp*mtcars$disp+b2*log(mtcars$wt)+mtcars$cyl4*b3,
real=mtcars$mpg)
model2_results<-model2_results %>%
mutate(res=real-pred)
model2_R2<-(cor(model2_results$real, model2_results$pred))^2
if (model2_R2 > max)
{
max = model2_R2
A = a0
B1 = b1
B2 = b2
B3 = b3
}
}
}
}
model2_results<-data.frame(pred=A+B1*mtcars$disp*mtcars$disp+B2*log(mtcars$wt)+mtcars$cyl4*B3,
real=mtcars$mpg)
model2_results<-model2_results %>%
mutate(res=real-pred)
model2_R2<-(cor(model2_results$real, model2_results$pred))^2
A
B1
B2
B3
model2_R2
knitr::opts_chunk$set(echo = TRUE)
library(corrplot)
library(dplyr)
corrplot(cor(mtcars))
mtcars = mtcars %>%
mutate(cyl4 = (cyl==4))
max <- A <- B1 <- B2 <- B3 <- 0
for (i in -2:0.2:2)
{
for (j in -2:0.2:2)
{
for (k in -2:0.2:2)
{
for (l in -2:0.2:2)
model2 <- nls(mpg ~ a0 + b1*disp^2+b2*log(wt)+b3*cyl4, data = mtcars, start = list(a0 = i, b1 = j, b2=k, b3=l))
a0 = summary(model2)$parameters[1][1]
b1 = summary(model2)$parameters[2][1]
b2 = summary(model2)$parameters[3][1]
b3 = summary(model2)$parameters[4][1]
model2_results<-data.frame(pred=a0+b1*mtcars$disp*mtcars$disp+b2*log(mtcars$wt)+mtcars$cyl4*b3,
real=mtcars$mpg)
model2_results<-model2_results %>%
mutate(res=real-pred)
model2_R2<-(cor(model2_results$real, model2_results$pred))^2
if (model2_R2 > max)
{
max = model2_R2
A = a0
B1 = b1
B2 = b2
B3 = b3
}
}
}
}
model2_results<-data.frame(pred=A+B1*mtcars$disp*mtcars$disp+B2*log(mtcars$wt)+mtcars$cyl4*B3,
real=mtcars$mpg)
model2_results<-model2_results %>%
mutate(res=real-pred)
model2_R2<-(cor(model2_results$real, model2_results$pred))^2
A
B1
B2
B3
model2_R2
max <- A <- B1 <- B2 <- B3 <- 0
knitr::opts_chunk$set(echo = TRUE)
library(corrplot)
library(dplyr)
corrplot(cor(mtcars))
mtcars = mtcars %>%
mutate(cyl4 = (cyl==4))
max <- A <- B1 <- B2 <- B3 <- 0
for (i in -2:0.2:2)
{
for (j in -2:0.2:2)
{
for (k in -2:0.2:2)
{
for (l in -2:0.2:2)
model2 <- nls(mpg ~ a0 + b1*disp^2+b2*log(wt)+b3*cyl4, data = mtcars, start = list(a0 = i, b1 = j, b2=k, b3=l))
a0 = summary(model2)$parameters[1][1]
b1 = summary(model2)$parameters[2][1]
b2 = summary(model2)$parameters[3][1]
b3 = summary(model2)$parameters[4][1]
model2_results<-data.frame(pred=a0+b1*mtcars$disp*mtcars$disp+b2*log(mtcars$wt)+mtcars$cyl4*b3,
real=mtcars$mpg)
model2_results<-model2_results %>%
mutate(res=real-pred)
model2_R2<-(cor(model2_results$real, model2_results$pred))^2
if (model2_R2 > max)
{
max = model2_R2
print("max")
A = a0
B1 = b1
B2 = b2
B3 = b3
}
}
}
}
model2_results<-data.frame(pred=A+B1*mtcars$disp*mtcars$disp+B2*log(mtcars$wt)+mtcars$cyl4*B3,
real=mtcars$mpg)
model2_results<-model2_results %>%
mutate(res=real-pred)
model2_R2<-(cor(model2_results$real, model2_results$pred))^2
A
B1
B2
B3
model2_R2
knitr::opts_chunk$set(echo = TRUE)
library(corrplot)
library(dplyr)
corrplot(cor(mtcars))
mtcars = mtcars %>%
mutate(cyl4 = (cyl==4))
max <- A <- B1 <- B2 <- B3 <- 0
for (i in -2:0.2:2)
{
for (j in -2:0.2:2)
{
for (k in -2:0.2:2)
{
for (l in -2:0.2:2)
model2 <- nls(mpg ~ a0 + b1*disp^2+b2*log(wt)+b3*cyl4, data = mtcars, start = list(a0 = i, b1 = j, b2=k, b3=l))
a0 = summary(model2)$parameters[1][1]
b1 = summary(model2)$parameters[2][1]
b2 = summary(model2)$parameters[3][1]
b3 = summary(model2)$parameters[4][1]
model2_results<-data.frame(pred=a0+b1*mtcars$disp*mtcars$disp+b2*log(mtcars$wt)+mtcars$cyl4*b3,
real=mtcars$mpg)
model2_results<-model2_results %>%
mutate(res=real-pred)
model2_R2<-(cor(model2_results$real, model2_results$pred))^2
if (model2_R2 > max)
{
max = model2_R2
print("max")
A = a0
B1 = b1
B2 = b2
B3 = b3
}
}
}
}
model2_results<-data.frame(pred=A+B1*mtcars$disp*mtcars$disp+B2*log(mtcars$wt)+mtcars$cyl4*B3,
real=mtcars$mpg)
model2_results<-model2_results %>%
mutate(res=real-pred)
model2_R2<-(cor(model2_results$real, model2_results$pred))^2
A
B1
B2
B3
model2_R2
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(corrplot)
library(dplyr)
corrplot(cor(mtcars))
mtcars = mtcars %>%
mutate(cyl4 = (cyl==4))
max <- A <- B1 <- B2 <- B3 <- 0
for (i in -2:0.2:2)
{
for (j in -2:0.2:2)
{
for (k in -2:0.2:2)
{
for (l in -2:0.2:2)
model2 <- nls(mpg ~ a0 + b1*disp^2+b2*log(wt)+b3*cyl4, data = mtcars, start = list(a0 = i, b1 = j, b2=k, b3=l))
a0 = summary(model2)$parameters[1][1]
b1 = summary(model2)$parameters[2][1]
b2 = summary(model2)$parameters[3][1]
b3 = summary(model2)$parameters[4][1]
model2_results<-data.frame(pred=a0+b1*mtcars$disp*mtcars$disp+b2*log(mtcars$wt)+mtcars$cyl4*b3,
real=mtcars$mpg)
model2_results<-model2_results %>%
mutate(res=real-pred)
model2_R2<-(cor(model2_results$real, model2_results$pred))^2
if (model2_R2 > max)
{
max = model2_R2
print("max")
A = a0
B1 = b1
B2 = b2
B3 = b3
}
}
}
}
model2_results<-data.frame(pred=A+B1*mtcars$disp*mtcars$disp+B2*log(mtcars$wt)+mtcars$cyl4*B3,
real=mtcars$mpg)
model2_results<-model2_results %>%
mutate(res=real-pred)
model2_R2<-(cor(model2_results$real, model2_results$pred))^2
A
B1
B2
B3
model2_R2
data('Titanic')
data = data('Titanic')
View(data)
data = data('titanic')
View(data)
library(gbm)
installed.packages('gbm')
installed.packages('gbm')
installed.package('gbm')
installed.packages("gbm")
library(gbm)
data("Titanic")
force(Titanic)
View(data)
view(data)
data("Titanic")
force(Titanic)
setwd("D:/AGH-studia/Semestr_7/Data_Mininig/cw4")
dane<-read.csv("titanic.csv")
dane <- subset(dane, select=c('X.pclass.', 'X.sex.', 'X.age.', 'X.survived.', 'X.parch.', 'X.sibsp.'))
colnames(dane) <- c('pclass', 'sex', 'age', 'survived', 'parch', 'sibsp')
dane$sex <- factor(dane$sex, levels=c("female", "male"))
dane$age <- as.integer(dane$age)
dane <- na.omit(dane)
dane <- subset(dane, select=c('pclass', 'sex', 'age', 'survived', 'parch', 'sibsp'))
indices <- sample(1:nrow(dane), 0.7*nrow(dane))
train_data <- dane[indices,]
test_data <- dane[-indices,]
#Trenowanie modelu GBM
gbm_model <- gbm(survived ~ ., data = train_data, distribution = "bernoulli", n.trees = 1000, interaction.depth = 3, shrinkage = 0.01)
installed.packages('gbm')
installed.packages("gbm")
installed.packages('gbm')
#Trenowanie modelu GBM
gbm_model <- gbm(survived ~ ., data = train_data, distribution = "bernoulli", n.trees = 1000, interaction.depth = 3, shrinkage = 0.01)
#Trenowanie modelu GBM
library(gbm)
gbm_model <- gbm(survived ~ ., data = train_data, distribution = "bernoulli", n.trees = 1000, interaction.depth = 3, shrinkage = 0.01)
#Trenowanie modelu GBM
library(gbm)
install.packages('gbm')
#Trenowanie modelu GBM
library(gbm)
gbm_model <- gbm(survived ~ ., data = train_data, distribution = "bernoulli", n.trees = 1000, interaction.depth = 3, shrinkage = 0.01)
summary(gbm_model)
predict_data <- predict(gbm_model, newdata = test_data)
predictBinaries <- as.factor(ifelse(predict_data>0.7, 1, 0))
test_data$survived <- as.factor(test_data$survived)
confusionMatrix(predictBinaries, test_data$survived)
install.packages('confusionMatrix')
library(confusionMatrix)
library('confusionMatrix')
confusionMatrix(predictBinaries, test_data$survived)
library(confusionMatrix)
install.packages('confusionMatrix')
install.packages("confusionMatri")
install.packages('confusionMatrix')
